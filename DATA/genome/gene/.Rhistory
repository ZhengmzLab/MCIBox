fluidRow(
column(2,
fluidRow(
checkboxInput("CHK_M01", "mk_tsne", TRUE)),
fluidRow(fileInput("MAINFIN", label="main-file")),
fluidRow(uiOutput("UI_B01")),
fluidRow(
dropdown(inputId = "DPD_M01", width = "300",
sliderInput("HT_M01", label = "height", min = 0,   max = 1000, value = 10,step=5),
numericInput("WD_M01", label = "width", min = 50,   max = 150, value = 98,step=0.5),
numericInput("TH_M01", label = "treeHeight", min = 0,   max = 100, value = 12.5,step=0.5),
numericInput("BINNUM_M01", "bin_num",min = 1, max = 40, value = 40, step = 1),
numericInput("FNMIN_M01", "fn_min",min = 1, max = 10000, value = 1, step = 1),
numericInput("FNMAX_M01", "fn_max",min = 1, max = 10000, value = 10, step = 1),
sliderInput("HT_R01", label = "heightR", min = 0,   max = 1000, value = 10,step=1),
numericInput("WD_R01", label = "widthR", min = 50,   max = 150, value = 100,step=0.5),
sliderInput("HT_T01", label = "heatmapHT", min = 0,   max = 1000, value = 10,step=1),
numericInput("WD_T01", label = "heatmapWD", min = 50,   max = 150, value = 101,step=0.5),
sliderInput("HT_B01", label = "loopHT", min = 0,   max = 1000, value = 10,step=1),
numericInput("WD_B01", label = "loopWD", min = 50,   max = 150, value = 100,step=0.5),
numericInput("PET_B01", label = "loopPET", min = 1,   max = 100, value = 2,step=1),
)),
),#column
column(9,
fluidRow(uiOutput("UI_T01")),
fluidRow(uiOutput("UI_M01")),
),column
),#fluidRow
)),#jqui_sortable
)#ui
# Define server logic required to draw a histogram
server <- function(input, output,session,clientData) {
###################################
observe({
toggle(id = "TRACKGENE", condition =input$CHKGENE)
})
###################################
D="/Users/zhongyuantian/Desktop/MCIV"
getwd()
setwd(D)
###################################
###################################
#RESIZE <- reactiveValues(xmin = 0, xmax = SUBGNMSIZE$size)
###~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
RESIZE <- reactiveValues(xmin = 5330214, xmax = 5933991, gnm="dm3",chr="chrX",left=0,right=5933991)
###################################
# ADJ<-100
observeEvent(input$ZMSM, {
ADJ<-round((RESIZE$xmax-RESIZE$xmin)*0.1)
MIDV=round(RESIZE$xmin+((RESIZE$xmax-RESIZE$xmin)*0.5))
print(MIDV)
RESIZE$xmin <- ifelse(RESIZE$xmin+ADJ>=MIDV,MIDV,RESIZE$xmin+ADJ)
RESIZE$xmax <- ifelse(RESIZE$xmax-ADJ<=MIDV,MIDV+1,RESIZE$xmax-ADJ)
updateSliderInput(session,"INPUT_RGN_SLIDE",min=RESIZE$left,max=RESIZE$right,value=c(RESIZE$xmin,RESIZE$xmax))
REGION=paste0(RESIZE$chr,":",RESIZE$xmin,"-",RESIZE$xmax)
updateTextInput(session,"INPUT_RGN_TEXT",value=REGION)
})
observeEvent(input$ZMLG, {
ADJ<-round((RESIZE$xmax-RESIZE$xmin)*0.1)
RESIZE$xmin <- ifelse(RESIZE$xmin-ADJ<=0,1,RESIZE$xmin-ADJ)
RESIZE$xmax <- ifelse(RESIZE$xmax+ADJ>RESIZE$right,RESIZE$right,RESIZE$xmax+ADJ)
updateSliderInput(session,"INPUT_RGN_SLIDE",min=RESIZE$left,max=RESIZE$right,value=c(RESIZE$xmin,RESIZE$xmax))
REGION=paste0(RESIZE$chr,":",RESIZE$xmin,"-",RESIZE$xmax)
updateTextInput(session,"INPUT_RGN_TEXT",value=REGION)
})
###################################
observeEvent(input$INPUT_REFGNM, {
cat("INPUT_REFGNM")
gnm <- input$INPUT_REFGNM
GNMSIZE=read.table(paste0(D,"/DATA/genome/size/",gnm,".txt"))
colnames(GNMSIZE)<-c("chr","size")
SUBGNMSIZE=GNMSIZE%>%filter(chr==RESIZE$chr)
RESIZE$right=SUBGNMSIZE$size
RESIZE$gnm <- gnm
updateSliderInput(session,"INPUT_RGN_SLIDE",min=RESIZE$left,max=RESIZE$right,value=c(RESIZE$xmin,RESIZE$xmax))
updateSelectInput(session,"INPUT_CHROMOSOME",choices=GNMSIZE$chr)
})
observeEvent(input$INPUT_CHROMOSOME, {
RESIZE$chr=input$INPUT_CHROMOSOME
GNMSIZE=read.table(paste0(D,"/DATA/genome/size/",RESIZE$gnm,".txt"))
colnames(GNMSIZE)<-c("chr","size")
SUBGNMSIZE=GNMSIZE%>%filter(chr==RESIZE$chr)
RESIZE$right=SUBGNMSIZE$size
RESIZE$xmin<-ifelse(RESIZE$xmin<=0,1,RESIZE$xmin)
RESIZE$xmax<-ifelse(RESIZE$xmax > RESIZE$right, RESIZE$right, RESIZE$xmax)
updateSliderInput(session,"INPUT_RGN_SLIDE",min=RESIZE$left,max=RESIZE$right,value=c(RESIZE$xmin,RESIZE$xmax))
REGION=paste0(RESIZE$chr,":",RESIZE$xmin,"-",RESIZE$xmax)
updateTextInput(session,"INPUT_RGN_TEXT",value=REGION)
})
###################################
observeEvent(input$CYTOBAND_BRUSH, {
cat("CYTOBAND_BRUSH")
brush <- input$CYTOBAND_BRUSH
RESIZE$xmin <- round(brush$xmin)
RESIZE$xmax <- round(brush$xmax)
RESIZE$xmin<-ifelse(RESIZE$xmin<=0,1,RESIZE$xmin)
RESIZE$xmax<-ifelse(RESIZE$xmax > RESIZE$right, RESIZE$right, RESIZE$xmax)
REGION=paste0(RESIZE$chr,":",RESIZE$xmin,"-",RESIZE$xmax)
updateTextInput(session,"INPUT_RGN_TEXT",value=REGION)
updateSliderInput(session,"INPUT_RGN_SLIDE",min=RESIZE$left,max=RESIZE$right,value=c(RESIZE$xmin,RESIZE$xmax))
})
observeEvent( input$GO_INPUT_RGN_TEXT, {
cat("GO_INPUT_RGN_TEXT")
RGN=input$INPUT_RGN_TEXT
RC=unlist(strsplit(RGN, "[:-]"))[[1]]
RS=as.integer(gsub(",", "",unlist(strsplit(RGN, "[:-]"))[[2]]))
RE=as.integer(gsub(",", "",unlist(strsplit(RGN, "[:-]"))[[3]]))
RESIZE$xmin <- RS
RESIZE$xmax <- RE
RESIZE$chr <- RC
RESIZE$xmin<-ifelse(RESIZE$xmin<=0,1,RESIZE$xmin)
RESIZE$xmax<-ifelse(RESIZE$xmax > RESIZE$right, RESIZE$right, RESIZE$xmax)
updateSliderInput(session,"INPUT_RGN_SLIDE",min=RESIZE$left,max=RESIZE$right,value=c(RESIZE$xmin,RESIZE$xmax))
REGION=paste0(RESIZE$chr,":",RESIZE$xmin,"-",RESIZE$xmax)
updateTextInput(session,"INPUT_RGN_TEXT",value=REGION)
updateSelectInput(session,"INPUT_CHROMOSOME",selected=RESIZE$chr)
# updateSliderInput(session,"TA01SLIDE",min=0,max=SUBGNMSIZE$size,value=c(RS,RE))
})
observeEvent(input$GO_INPUT_RGN_SLIDE, {
cat("GO_INPUT_RGN_SLIDE")
slide <- input$INPUT_RGN_SLIDE
RESIZE$xmin <- slide[[1]]
RESIZE$xmax <- slide[[2]]
RESIZE$xmin<-ifelse(RESIZE$xmin<=0,1,RESIZE$xmin)
RESIZE$xmax<-ifelse(RESIZE$xmax > RESIZE$right, RESIZE$right, RESIZE$xmax)
REGION=paste0(RESIZE$chr,":",RESIZE$xmin,"-",RESIZE$xmax)
updateTextInput(session,"INPUT_RGN_TEXT",value=REGION)
updateSliderInput(session,"INPUT_RGN_SLIDE",min=RESIZE$left,max=RESIZE$right,value=c(RESIZE$xmin,RESIZE$xmax))
})
###################################
XBRKNUM<-5
COLOR_GRAY="gray"
###################################
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###################################
output$CYTOBAND <- renderPlot({
GNMBAND=read.table(paste0(D,"/DATA/genome/chrband/",RESIZE$gnm,".txt"))
colnames(GNMBAND)<-c("chr","start","end","region","col")
CHR=RESIZE$chr
SUBGNMBAND=GNMBAND%>%filter(chr==CHR)
print(RESIZE$gnm)
XLIM=c(RESIZE$xmin,RESIZE$xmax)
XBREAKS<-seq(RESIZE$xmin,RESIZE$xmax,(RESIZE$xmax-RESIZE$xmin)/XBRKNUM)
XLIM<-c(RESIZE$xmin,RESIZE$xmax)
YBREAKS<-5
head(SUBGNMBAND)
LABEL=data.frame("BRKS"=XBREAKS)
LMID<-data.frame(LABEL[2:5,])
colnames(LMID)<-"BRKS"
LEND<-data.frame(LABEL[c(1,6),])
colnames(LEND)<-"BRKS"
print(LEND)
ggplot(SUBGNMBAND) +
geom_segment(data=LABEL,aes(x=BRKS,xend=BRKS+1,y=5,yend=8),color="blue")+
#geom_rect(data=SUBGNMSIZE,aes(xmin=0,xmax=size,ymin=0,ymax=15), size=0, fill="white",col="white",alpha=0)+
geom_rect(data=SUBGNMBAND,aes(xmin=start,xmax=end,ymin=0,ymax=6, fill=col))+
scale_fill_manual(values=c("gpos100"= rgb(92/255.0, 92/255.0, 81/255.0),
"gpos"= rgb(92/255.0, 92/255.0, 81/255.0),
"gpos75"= rgb(199/255.0, 192/255.0, 113/255.0),
"gpos66"= rgb(199/255.0, 192/255.0, 113/255.0),
"gpos50"= rgb(134/255.0, 186/255.0, 204/255.0),
"gpos33"= rgb(134/255.0, 186/255.0, 204/255.0),
"gpos25"= rgb(221/255.0, 210/255.0, 180/255.0),
"gvar"= rgb(241/255.0, 230/255.0, 200/255.0),
"gneg"= rgb(250/255.0, 240/255.0, 230/255.0),
"acen"= rgb(219/255.0, 98/255.0, 25/255.0),
"stalk"= rgb(100/255.0, 127/255.0, 164/255.0),
na.value = rgb(100/255.0, 100/255.0, 100/255.0)))+
#geom_rect(data=SUBGNMSIZE,aes(xmin=0,xmax=size,ymin=0,ymax=10), size=0.3, fill="white",col="gray",alpha=0)+
#scale_fill_grey(end=0.5)+
theme_bw()+
geom_text(data=LMID,aes(x=BRKS,y=12,
label=format(round(as.numeric(BRKS), 1), nsmall=0, big.mark=",")),
size=3,color="blue")+
geom_text_repel(data=LEND,aes(x=BRKS,y=12,
label=format(round(as.numeric(BRKS), 1), nsmall=0, big.mark=",")),
size=3,color="blue")+
theme(legend.position="none",
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.background = element_rect(fill="white"),
panel.border =  element_blank(),
plot.title = element_blank(),
#plot.margin =unit(c(t=5, r=30, b=5, l=30), "pt"),  #margin(t = 0, r = 0, b = 0, l = 0, unit = "pt")
#axis.ticks.length.y.left=unit(-0.25, "cm"),
#axis.text.y = element_text(margin=unit(c(-0.5,0.5,0.5,0.5), "cm"),),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
plot.background = element_blank())+
scale_x_continuous(breaks=XBREAKS,labels=scales::comma)+
scale_y_continuous(breaks=YBREAKS,labels=CHR)+
coord_cartesian(xlim = XLIM,expand = FALSE,ylim=c(-5,15))
})
#### ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
###################################data_s2 <- sample_n(data, 3)
output$TRACKGENE <- renderPlot({
if(input$CHKGENE==FALSE){
return(NULL)
}
updateNumericInput(session,"HT_GENE",value=200)
GENENAME<-read.table(paste0("/Users/zhongyuantian/Desktop/MCIV/DATA/genome/gene/",RESIZE$gnm,".txt"),header=TRUE)
colnames(GENENAME)<-c("chromosome","start","end","width","strand","feature","gene","exon","transcript","symbol","nexon","isotype")
DATA=GENENAME
RGNC=RESIZE$chr
RGNS=RESIZE$xmin
RGNE=RESIZE$xmax
COL01="darkgreen"
STK=input$GENESTYLE
OIN<-DATA %>% filter(chromosome==RGNC,start>=RGNS,end<=RGNE)
OING<-data.frame(unique(OIN$gene))
colnames(OING)<-"gene"
#print(head(OING))
MIN<-merge(DATA,OING,by="gene",all.x=FALSE,all.y=TRUE)
#print(head(MIN))
if (input$ISOSTYLE=="longest"){
SIN<-MIN %>% filter(isotype=="LONGEST_ISOFORM")
}else if(input$ISOSTYLE=="merged"){
SIN<-MIN %>% mutate(transcript = gene)
#print(head(SIN))
}else{
SIN<-MIN
}
WTH=input$PWGENE
SIN01<-SIN %>% filter(strand=="+")
SIN02<-SIN %>% filter(strand=="-")
HTP=length(unique(SIN01$transcript))/length(unique(SIN$transcript))
HTM=length(unique(SIN02$transcript))/length(unique(SIN$transcript))
grtrack01 <- GeneRegionTrack(SIN01,
strand=SIN01$strand,
rstarts = SIN01$start,
rends = SIN01$end,
col="darkgreen",
fill="darkgreen",
col.line="darkgreen",
lwd=0.5,
stacking=STK, #c(hide, dense, squish, pack,full).
add35=FALSE,add53=FALSE,
collapseTranscripts=FALSE,
shape=c("smallArrow", "box"), ## box, arrow, ellipse, and smallArrow are implemented.
transcriptAnnotation = "symbol")
COL02="darkblue"
grtrack02 <- GeneRegionTrack(SIN02,
strand=SIN02$strand,
rstarts = SIN02$start,
rends = SIN02$end,
col="darkblue",
col.line="darkblue",
fill="darkblue",
lwd=0.5,
stacking=STK, #c(hide, dense, squish, pack,full).
add35=FALSE,add53=FALSE,
collapseTranscripts=FALSE,
shape=c("smallArrow", "box"), ## box, arrow, ellipse, and smallArrow are implemented.
transcriptAnnotation = "symbol")
grid.newpage()
pushViewport(viewport(height=HTP,width=WTH, y=1, just="top"))
grid.rect(gp=gpar(col="grey",lineheight=0.1))
plotTracks(grtrack01,from = RGNS,to = RGNE,
panel.only=TRUE,chromosome = RGNC,
add = TRUE)
popViewport(1)
pushViewport(viewport(height=HTM,width=WTH,y=0, just="bottom"))
grid.rect(gp=gpar(col="grey",lineheight=0.1))
plotTracks(grtrack02,from = RGNS,to = RGNE,
panel.only=TRUE,chromosome = RGNC,
add = TRUE)
popViewport(1)
})
output$GENETRACK <- renderUI({
plotOutput("TRACKGENE", height = input$HT_GENE,width=paste0(input$WD_GENE,"%"))
})
###################################data_s2 <- sample_n(data, 3)
###################################data_s2 <- sample_n(data, 3)
###################################data_s2 <- sample_n(data, 3)
###################################data_s2 <- sample_n(data, 3)
###################################data_s2 <- sample_n(data, 3)
} ## server
############################################
# Preview the UI in the console
shinyApp(ui = ui, server = server)
}## interactice
if (!require("ggbio"))   BiocManager::install("ggbio") ##XX
if (!require("Homo.sapiens"))   BiocManager::install("Homo.sapiens") ##XX
if (!require("GenomicRanges"))   BiocManager::install("GenomicRanges") ##XX
#################
gd <- list(join1 = c(GO.db="GOID", org.Hs.eg.db="GO"),
join2 = c(org.Hs.eg.db="ENTREZID",
TxDb.Hsapiens.UCSC.hg19.knownGene="GENEID"))
destination <- tempfile()
dir.create(destination)
makeOrganismPackage(pkgname = "Homo.sapiens3",
graphData = gd,
organism = "Homo sapiens",
version = "1.0.0",
maintainer = "Package Maintainer<maintainer@somewhere.org>",
author = "Some Body",
destDir = destination,
license = "Artistic-2.0")
#wget http://www.bioconductor.org/packages/release/data/annotation/src/contrib/TxDb.Dmelanogaster.UCSC.dm3.ensGene_3.2.2.tar.gz
gd <- list(join1 = c(GO.db="GOID", org.Hs.eg.db="GO"),
join2 = c(org.Hs.eg.db="ENTREZID",
TxDb.Dmelanogaster.UCSC.dm3.ensGene="GENEID"))
destination <- tempfile()
dir.create(destination)
makeOrganismPackage(pkgname = "dm3",
graphData = gd,
organism = "D.melanogaster",
version = "1.0.0",
maintainer = "Package Maintainer<maintainer@somewhere.org>",
author = "Some Body",
destDir = destination,
license = "Artistic-2.0")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Dmelanogaster.UCSC.dm3.ensGene")
#wget http://www.bioconductor.org/packages/release/data/annotation/src/contrib/TxDb.Dmelanogaster.UCSC.dm3.ensGene_3.2.2.tar.gz
gd <- list(join1 = c(GO.db="GOID", org.Hs.eg.db="GO"),
join2 = c(org.Hs.eg.db="ENTREZID",
TxDb.Dmelanogaster.UCSC.dm3.ensGene="GENEID"))
destination <- tempfile()
dir.create(destination)
makeOrganismPackage(pkgname = "dm3",
graphData = gd,
organism = "D.melanogaster",
version = "1.0.0",
maintainer = "Package Maintainer<maintainer@somewhere.org>",
author = "Some Body",
destDir = destination,
license = "Artistic-2.0")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TxDb.Dmelanogaster.UCSC.dm3.ensGene")
install.packages("/Users/zhongyuantian/Desktop/MCIV/DATA/TxDb.Dmelanogaster.UCSC.dm3.ensGene_3.2.2.tar", repos = NULL, type = "source")
#wget http://www.bioconductor.org/packages/release/data/annotation/src/contrib/TxDb.Dmelanogaster.UCSC.dm3.ensGene_3.2.2.tar.gz
gd <- list(join1 = c(GO.db="GOID", org.Hs.eg.db="GO"),
join2 = c(org.Hs.eg.db="ENTREZID",
TxDb.Dmelanogaster.UCSC.dm3.ensGene="GENEID"))
destination <- tempfile()
dir.create(destination)
makeOrganismPackage(pkgname = "dm3",
graphData = gd,
organism = "D.melanogaster",
version = "1.0.0",
maintainer = "Package Maintainer<maintainer@somewhere.org>",
author = "Some Body",
destDir = destination,
license = "Artistic-2.0")
PKG<-makeOrganismPackage(pkgname = "dm3",
graphData = gd,
organism = "D.melanogaster",
version = "1.0.0",
maintainer = "Package Maintainer<maintainer@somewhere.org>",
author = "Some Body",
destDir = destination,
license = "Artistic-2.0")
print(PKG)
PKG<-makeOrganismPackage(pkgname = "dm3",
graphData = gd,
organism = "D.melanogaster",
version = "1.0.0",
maintainer = "Package Maintainer<maintainer@somewhere.org>",
author = "Some Body",
destDir = destination,
license = "Artistic-2.0")
makeOrganismPackage(pkgname = "dm3",
graphData = gd,
organism = "D.melanogaster",
version = "1.0.0",
maintainer = "Package Maintainer<maintainer@somewhere.org>",
author = "Some Body",
destDir = destination,
license = "Artistic-2.0")
install.packages("/var/folders/sf/rll9dtcs4037jq9k3wn9ll8m0000gn/T//Rtmp9Fi5fV/file22f97a65bb/dm3 ", repos = NULL, type = "source")
library("dm3",)
library("dm3")
library(dplyr)
setwd("/Users/zhongyuantian/Desktop/MCIV/DATA/genome/gene")
FIN=trad.table("ROX2.txt")
FIN=trad.table("ROX2.txt")
df<-FIN %>%select(V1,V2,V3)
FIN=read.table("ROX2.txt")
df<-FIN %>%select(V1,V2,V3)
colnames(df)<-c("chrom","start","end")
gr3<-as(df, "GRanges")
autoplot(dm6, wh=gr3, names.expr="roX2", gap.geom = "chevron",aes(color=strand,fill=strand))
autoplot("dm3", wh=gr3, names.expr="roX2", gap.geom = "chevron",aes(color=strand,fill=strand))
autoplot(dm3, wh=gr3, names.expr="roX2", gap.geom = "chevron",aes(color=strand,fill=strand))
autoplot(dm3, which = genesymbol["ALDOA"], names.expr = "tx_name:::gene_id")
library("biovizBase")
(data(genesymbol, package = "biovizBase"))
str(genesymbol)
autoplot(dm3, which = genesymbol["ALDOA"], names.expr = "tx_name:::gene_id")
autoplot(dm3, wh = genesymbol["ALDOA"], names.expr = "tx_name:::gene_id")
autoplot(dm3, wh=gr3, names.expr="tx_name:::gene_id", gap.geom = "chevron",aes(color=strand,fill=strand))
txdb_file <- system.file("extdata", "Biomart_Ensembl_sample.sqlite",
package="GenomicFeatures")
txdb <- loadDb(txdb_file)
txdb
## Use of seqinfo():
seqlevelsStyle(txdb)
seqinfo(txdb)
seqlevels(txdb)
seqlengths(txdb)  # shortcut for 'seqlengths(seqinfo(txdb))'
isCircular(txdb)  # shortcut for 'isCircular(seqinfo(txdb))'
names(which(isCircular(txdb)))
## You can set user-supplied seqlevels on 'txdb' to restrict any further
## operations to a subset of chromosomes:
seqlevels(txdb) <- c("Y", "6")
## Then you can restore the seqlevels stored in the db:
seqlevels(txdb) <- seqlevels0(txdb)
## Use of as.list():
txdb_dump <- as.list(txdb)
txdb_dump
txdb1 <- do.call(makeTxDb, txdb_dump)
stopifnot(identical(as.list(txdb1), txdb_dump))
suppressPackageStartupMessages(library('GenomicFeatures'))
samplefile <- system.file("extdata", "hg19_knownGene_sample.sqlite", package="GenomicFeatures")
txdb <- loadDb(samplefile) txdb
txdb <- loadDb(samplefile)
txdb
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene #shorthand (for convenience) txdb
txdb
library(dm3)
txdb <- dm3 #shorthand (for convenience) txdb
txdb
head(seqlevels(txdb))
seqlevels(txdb) <- "chrX"
seqlevels(txdb) <- "chr2L"
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene #shorthand (for convenience) txdb
txdb
seqlevels(txdb) <- "chr1"
head(seqlevels(txdb))
seqlevels(txdb) <- "chr1"
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene #shorthand (for convenience) txdb
txdb
head(seqlevels(txdb))
seqlevels(txdb) <- "chr1"
seqlevels(txdb) <- seqlevels0(txdb)
seqlevels(txdb) <- "chr15"
seqlevels(txdb)
keys <- c("100033416", "100033417", "100033420")
columns(txdb)
keytypes(txdb)
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
seqlevels(txdb) <- "chr1"
seqlevels(txdb) <- seqlevels0(txdb)
seqlevels(txdb) <- "chr15"
seqlevels(txdb)
keys <- c("100033416", "100033417", "100033420")
columns(txdb)
keytypes(txdb)
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
########
#https://www.bioconductor.org/packages/devel/bioc/vignettes/GenomicFeatures/inst/doc/GenomicFeatures.pdf
suppressPackageStartupMessages(library('GenomicFeatures'))
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
#~~~~~~~
library(dm3)
txdb <- dm3 #shorthand (for convenience) txdb
txdb
head(seqlevels(txdb))
seqlevels(txdb) <- "chr2L"
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
#https://www.bioconductor.org/packages/devel/bioc/vignettes/GenomicFeatures/inst/doc/GenomicFeatures.pdf
suppressPackageStartupMessages(library('GenomicFeatures'))
samplefile <- system.file("extdata", "hg19_knownGene_sample.sqlite", package="GenomicFeatures")
txdb <- loadDb(samplefile)
txdb
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene #shorthand (for convenience) txdb
txdb
head(seqlevels(txdb))
seqlevels(txdb) <- "chr1"
seqlevels(txdb) <- seqlevels0(txdb)
seqlevels(txdb) <- "chr15"
seqlevels(txdb)
keys <- c("100033416", "100033417", "100033420")
columns(txdb)
keytypes(txdb)
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
#~~~~~~~
cols <- c("TXNAME", "TXSTRAND", "TXCHROM")
select(txdb, keys=keys, columns=cols, keytype="GENEID")
library(dplyr)
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
cols <- c("TXNAME", "TXSTRAND", "TXCHROM")
select(txdb, keys=keys, columns=cols, keytype="GENEID")
something <- as.tibble(etr2018$PeerCode <- do.call(paste, c(select(etr2018, one_of(PeerCodeList)), sep="-"))
filter(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
select(data.frame(txdb), keys = keys, columns="TXNAME", keytype="GENEID")
select(txdb, keys = keys, columns="TXNAME", keytype="GENEID")
txdb_file <- system.file("extdata", "Biomart_Ensembl_sample.sqlite",
package="GenomicFeatures")
txdb <- loadDb(txdb_file)
txdb
## find key types
keytypes(txdb)
## list IDs that can be used to filter
head(keys(txdb, "GENEID"))
head(keys(txdb, "TXID"))
head(keys(txdb, "TXNAME"))
## list columns that can be returned by select
columns(txdb)
## call select
res <- select(txdb, head(keys(txdb, "GENEID")),
columns=c("GENEID","TXNAME"),
keytype="GENEID")
head(res)
